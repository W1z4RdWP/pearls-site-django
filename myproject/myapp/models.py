from django.db import models
from django.contrib.auth.models import User
from django.utils.text import slugify
from django_ckeditor_5.fields import CKEditor5Field
from django.utils import timezone 

from courses.models import Course, Lesson
from quizzes.models import Question, Answer

    
class UserProgress(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    course = models.ForeignKey(Course, on_delete=models.CASCADE)
    lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE)
    completed = models.BooleanField(default=False)
    completed_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('user', 'lesson')

    def save(self, *args, **kwargs):
        if not self.course_id:
            self.course = self.lesson.course
        super().save(*args, **kwargs)



class UserCourse(models.Model):
    """
    –ú–æ–¥–µ–ª—å —Å–≤—è–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫—É—Ä—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∫—É—Ä—Å –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='started_courses')
    course = models.ForeignKey(Course, on_delete=models.CASCADE)
    start_date = models.DateTimeField(auto_now_add=True)
    end_date = models.DateTimeField(null=True, blank=True)
    is_completed = models.BooleanField(default=False)
    course_complete_animation_shown = models.BooleanField(default=False)

    class Meta:
        unique_together = ('user', 'course')
        verbose_name = '–ö—É—Ä—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        verbose_name_plural = '–ö—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'

    
    def is_final_quiz_passed(self):
        if self.course.final_quiz:
            return QuizResult.objects.filter(
                user=self.user,
                quiz_title=self.course.final_quiz.name,
                passed=True
            ).exists()
        return True  # –ï—Å–ª–∏ —Ç–µ—Å—Ç–∞ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ "–ø—Ä–æ–π–¥–µ–Ω–æ"

    def can_receive_exp(self):
        # –û–ø—ã—Ç –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω –∏ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Å—Ç) —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω
        if not self.is_completed:
            return False
        if self.course.final_quiz:
            return self.is_final_quiz_passed()
        return True

    def exp_reward(self):
        base_exp = 150
        if self.course.final_quiz:
            return int(base_exp * 1.1)  # +10%
        return base_exp


    def save(self, *args, **kwargs):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º end_date —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫—É—Ä—Å–∞"""
        if self.is_completed and not self.end_date:
            self.end_date = timezone.now()
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.user.username} - {self.course.title}"
    

class QuizResult(models.Model):
    """
    –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è,
    –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    Attrs:
        - user(ForeignKey) - —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç;
        - quiz_title(CharField) - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞;
        - score(Integer) - –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–∞–Ω–æ;
        - total_questions(Integer) - –≤—Å–µ–≥–æ –±—ã–ª–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–∞–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ;
        - percent(Float) - –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏;
        - completed_at(DateTime) - –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ —Ç–µ—Å—Ç –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω;
        - passed(Bool) - –û—Ç–º–µ—á–∞–µ—Ç —Ç–µ—Å—Ç –∑–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–µ—Ç, –µ—Å–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤. —É—Å–ª–æ–≤–∏—è–º.

    """
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    quiz_title = models.CharField(max_length=200)
    score = models.IntegerField()
    total_questions = models.IntegerField()
    percent = models.FloatField()
    completed_at = models.DateTimeField(auto_now_add=True)
    passed = models.BooleanField(default=False)

    class Meta:
        verbose_name = '–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞'
        verbose_name_plural = '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤'

    def __str__(self):
        return f"{self.user.username} - {self.quiz_title} ({self.percent}%)"
    

class UserAnswer(models.Model):
    """
    –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.

    Attrs:
        - user(ForeignKey) - —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª –æ—Ç–≤–µ—Ç;
        - quiz_result(ForeignKey) - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞;
        - question(ForeignKey) - —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –æ—Ç–≤–µ—Ç;
        - selected_answer(ForeignKey) - —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞;
        - is_correct(Bool) - –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å;
        - answer_text(CharField) - —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.
    
    """
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='user_answers')
    quiz_result = models.ForeignKey('QuizResult', on_delete=models.CASCADE, related_name='answers')
    question = models.ForeignKey('quizzes.Question', on_delete=models.CASCADE)
    selected_answer = models.ForeignKey('quizzes.Answer', on_delete=models.SET_NULL, null=True, blank=True)
    is_correct = models.BooleanField()
    answer_text = models.CharField(max_length=500, blank=True, null=True)
    #text_answer = models.CharField(max_length=500, blank=True, null=True)

    def __str__(self):
        return f"{self.user.username} - {self.question.text} ({'–≤–µ—Ä–Ω–æ' if self.is_correct else '–Ω–µ–≤–µ—Ä–Ω–æ'})"


class ChangeLog(models.Model):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π. 
    –í –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –∏ –¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.
    """
    VERSION_TYPES = (
        ('feature', 'üéÅ –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª'),
        ('bugfix', 'üêû –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫'),
        ('improvement', '‚ö° –£–ª—É—á—à–µ–Ω–∏–µ'),
        ('security', 'üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'),
    )

    version = models.CharField('–í–µ—Ä—Å–∏—è', max_length=20)
    release_date = models.DateField('–î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞', default=timezone.now)
    type = models.CharField('–¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è', max_length=20, choices=VERSION_TYPES)
    title = models.CharField('–ó–∞–≥–æ–ª–æ–≤–æ–∫', max_length=200)
    description = models.TextField('–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
    related_link = models.URLField('–°—Å—ã–ª–∫–∞', blank=True)
    is_public = models.BooleanField('–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ', default=True)
    order = models.PositiveIntegerField('–ü–æ—Ä—è–¥–æ–∫', default=0)

    class Meta:
        ordering = ['-release_date', '-order']
        verbose_name = '–ó–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∏–π'
        verbose_name_plural = '–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π'

    def __str__(self):
        return f"{self.version} - {self.title}"
